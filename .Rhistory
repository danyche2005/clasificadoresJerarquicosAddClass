x[x==15]<-"f"
x[x==16]<-"g"
x[x==17]<-"h"
x[x==4]<-"i"
x[x==5]<-"j"
x[x==6]<-"k"
x[x==7]<-"l"
x[x==8]<-"m"
x[x==9]<-"n"
abalone$claseAPredecir<-x
abalone$claseAPredecir<-factor(abalone$claseAPredecir)
#Simplifico la prueba:
#abalone<-abalone[0:1000,]
#abalone<-abalone[sample(nrow(abalone), size = 1000, replace = FALSE),]
dataSetUse<-abalone
#Para las pruebas con grandes Datasets
#Si el dataSetUse es mayor de 1000 entonces limitar solamente a 1000 predicciones
if(nrow(dataSetUse)>1000){
#Separo las filas que tienen muy poco ejemplos
ttable<-table(dataSetUse$claseAPredecir)
selectCat<-names(ttable[which(ttable<100)])
dataSetUse_1Part<-dataSetUse[dataSetUse$claseAPredecir %in% selectCat,]
#De los otros valores obtengo los datos obtengo los registros de dataSetUse
dataSetUse_2Part<-dataSetUse[!dataSetUse$claseAPredecir %in% selectCat,]
dataSetUse_2Part$claseAPredecir<-factor(dataSetUse_2Part$claseAPredecir)
levels(dataSetUse$claseAPredecir)
#Obtengo el 5% del total por clase
library(caret)
selTest <- createDataPartition(dataSetUse_2Part$claseAPredecir, p = 0.20, list = FALSE)
dataSetUse_2Part <- dataSetUse_2Part[ selTest,]
#Junto todas las partes
dataSetUse<-rbind(dataSetUse_1Part,dataSetUse_2Part)
dataSetUse$claseAPredecir<-factor(dataSetUse$claseAPredecir)
#filtTesting<-filtTesting[sample(nrow(filtTesting), size = 1000, replace = FALSE),]
}
dataSetUse$claseAPredecir<-factor(dataSetUse$claseAPredecir)
# Obtencion de los Datos
letter <- read.csv("C:/ejerciciosr/paperTFM/datos/letter-recognition.data", header=FALSE)
# Asigno los nombres de las columnas
colnames(letter)[colnames(letter)=="V1"] <- "claseAPredecir"
# Muestro la composicion de los datos
summary(letter)
str(letter)
#Operaciones de Descripcion de datos
letter <- letter[complete.cases(letter),]
#Muestro la relacion entre variables a traves de un dendograma:
cc <- cor(letter[2:17],use="pairwise",method="pearson")
thc <- hclust(dist(cc), method="average")
dn <- as.dendrogram(thc)
plot(dn, horiz = TRUE)
#Simplifico la prueba
#Simplifico la prueba+
letter$claseAPredecir<-factor(letter$claseAPredecir)
#Obtengo las 20 registros randomicamente por cada categoria
categorias<-levels(letter$claseAPredecir)
nuevodf<-letter[letter$claseAPredecir=="cualquier",]
for(i in 1:length(categorias)){
dfxcat<-letter[letter$claseAPredecir==categorias[i],]
nuevodf<-rbind(nuevodf,dfxcat[sample(nrow(dfxcat),size=100, replace=FALSE),])
}
letter<-nuevodf
dataSetUse<-letter
source('C:/ejerciciosr/clasificadoresJerarquicoAdaptativos/experimentos/exp_ClaJerarquico_20_db/exp_claJerarquico_20_db.R')
setwd("D:/ejerciciosr/clasificadoresJerarquicoAdaptativo")
source('C:/ejerciciosr/clasificadoresJerarquicoAdaptativo/experimentos/exp_ClaJerarquico_20_db/exp_claJerarquico_DocumentalesBaseCentroid.R')
library(readr)
pedidos <- read_csv("C:/Users/Daniel/Desktop/pedidos.csv",
col_types = cols(ciudad_pe = col_skip(),
cod_cliente = col_skip(), codigo = col_skip(),
desc_anulacion = col_skip(), desc_autorizacion = col_skip(),
direccion_pe = col_skip(), fecha_anulacion = col_skip(),
fecha_pe = col_date(format = "%Y-%m-%d"),
hora = col_number(), iva = col_double(),
num_autorizacion = col_skip(), pais_pe = col_skip(),
provincia_pe = col_skip(), telefono_pe = col_skip(),
tipo_comprobante = col_skip(), vendedor_pe = col_skip()))
View(pedidos)
plot(pedidos$total_pagado,pedidos$fecha_pe)
plot(pedidos$fecha_pe,pedidos$total_pagado)
pedidosFilt<-pedidos[pedidos$fecha_pe>as.Date("2015-01-01")]
pedidosFilt<-pedidos[ which(pedidos$fecha_pe>as.Date("2015-01-01")), ]
plot(pedidosFilt$fecha_pe,pedidosFilt$total_pagado)
plot(pedidosFilt$fecha_pe,pedidosFilt$total_pagado,col=pedidosFilt$cod_bodega)
plot(pedidosFilt$fecha_pe,pedidosFilt$total_pagado,col=pedidosFilt$cod_bodega)
axis.Date(1, at=seq(min(pedidosFilt$fecha_pe), max(pedidosFilt$fecha_pe), by="30 mon"), format="%m-%Y")
seq(min(pedidosFilt$fecha_pe), max(pedidosFilt$fecha_pe), by="30 mon")
min(pedidosFilt$fecha_pe)
max(pedidosFilt$fecha_pe)
seq(min(pedidosFilt$fecha_pe), max(pedidosFilt$fecha_pe), by="30 mon")
min(pedidosFilt$fecha_pe)
axis.Date(1, at=seq(min(pedidosFilt$fecha_pe), max(pedidosFilt$fecha_pe), by="30 mon"), format="%Y-%m-%d")
seq(min(pedidosFilt$fecha_pe), max(pedidosFilt$fecha_pe), by="30 mon")
library(ggplot2)
Lines <- "Date            Visits
11/1/2010   696537
11/2/2010   718748
11/3/2010   799355
11/4/2010   805800
11/5/2010   701262
11/6/2010   531579
11/7/2010   690068
11/8/2010   756947
11/9/2010   718757
11/10/2010  701768
11/11/2010  820113
11/12/2010  645259"
dm <- read.table(textConnection(Lines), header = TRUE)
dm <- mutate(dm, Date = as.Date(dm$Date, "%m/%d/%Y"))
ggplot(data = dm, aes(Date, Visits)) +
geom_line() +
scale_x_date(format = "%b %d", major =  "1 day")
dm <- mutate(dm, Date = as.Date(dm$Date, "%m/%d/%Y"))
plot(pedidosFilt$fecha_pe,pedidosFilt$total_pagado,col=pedidosFilt$cod_bodega)
axis.Date(1, at=seq(min(pedidosFilt$fecha_pe), max(pedidosFilt$fecha_pe), by="30 mon"), format="%Y-%m-%d")
plot(pedidosFilt$fecha_pe,pedidosFilt$total_pagado,col=pedidosFilt$cod_bodega)
seq(as.Date('2011-01-01'),as.Date('2011-01-31'),by = 1)
seq(as.Date(min(pedidosFilt$fecha_pe)),as.Date(max(pedidosFilt$fecha_pe)),by = 1)
axis.Date(1, at=seq(min(pedidosFilt$fecha_pe), max(pedidosFilt$fecha_pe), by="1"), format="%Y-%m-%d")
axis.Date(1, at=seq(min(pedidosFilt$fecha_pe), max(pedidosFilt$fecha_pe), by=1), format="%Y-%m-%d")
plot(pedidosFilt$fecha_pe,pedidosFilt$total_pagado,col=pedidosFilt$cod_bodega)
axis.Date(1, at=seq(min(pedidosFilt$fecha_pe), max(pedidosFilt$fecha_pe), by=1), format="%Y-%m-%d")
plot(pedidosFilt$fecha_pe,pedidosFilt$total_pagado,col=pedidosFilt$cod_bodega)
axis.Date(1, at=seq(min(pedidosFilt$fecha_pe), max(pedidosFilt$fecha_pe), by=1), format="%Y-%m-%d")
axis.Date(1, at=seq(min(pedidosFilt$fecha_pe), max(pedidosFilt$fecha_pe), by="month"), format="%Y-%m-%d")
plot(pedidosFilt$fecha_pe,pedidosFilt$total_pagado,col=pedidosFilt$cod_bodega)
axis.Date(1, at=seq(min(pedidosFilt$fecha_pe), max(pedidosFilt$fecha_pe), by="month"), format="%Y-%m-%d")
library(ggplot2)
qplot(pedidosFilt$fecha_pe,pedidosFilt$total_pagado,col=pedidosFilt$cod_bodega)
pedidosFilt$cod_bodega<-factor(pedidosFilt$cod_bodega)
qplot(pedidosFilt$fecha_pe,pedidosFilt$total_pagado,col=pedidosFilt$cod_bodega)
levels(pedidosFilt$cod_bodega)
levels(pedidosFilt$cod_bodega) <- c("LocalCentro", "LocalEstadio","FutbolAdictos")
library(ggplot2)
qplot(pedidosFilt$fecha_pe,pedidosFilt$total_pagado,col=pedidosFilt$cod_bodega)
qplot(pedidosFilt$fecha_pe,pedidosFilt$total_pagado,col=pedidosFilt$cod_bodega,alpha=I(0.1))
axis.Date(1, at=seq(min(pedidosFilt$fecha_pe), max(pedidosFilt$fecha_pe), by="month"), format="%Y-%m-%d")
qplot(pedidosFilt$fecha_pe,pedidosFilt$total_pagado,col=pedidosFilt$cod_bodega,alpha=I(0.1))
+ scale_x_date(date_minor_breaks = "1 month")
ggplot(pedidosFilt$fecha_pe,pedidosFilt$total_pagado,col=pedidosFilt$cod_bodega,alpha=I(0.1)) +
scale_x_date(date_minor_breaks = "1 month")
ggplot(pedidosFilt, aes(fecha_pe,total_pagado )) +
geom_line()
+ scale_x_date(date_minor_breaks = "1 month")
ggplot(pedidosFilt, aes(fecha_pe,total_pagado )) +
geom_line()  + scale_x_date(date_minor_breaks = "1 month")
qplot(pedidosFilt$fecha_pe,pedidosFilt$total_pagado,col=pedidosFilt$cod_bodega,alpha=I(0.1)) +
ggplot(pedidosFilt, aes(fecha_pe,total_pagado ))   + scale_x_date(date_minor_breaks = "1 month")
ggplot(pedidosFilt, aes(fecha_pe,total_pagado )) +
geom_line()  + scale_x_date(date_minor_breaks = "1 month")
ggplot(pedidosFilt, aes(fecha_pe,total_pagado )) +
geom_point()  + scale_x_date(date_minor_breaks = "1 month")
ggplot(pedidosFilt, aes(fecha_pe,total_pagado )) +
geom_point(aes(color = cod_bodega),
alpha = 0.5,
size = 1.5,
position = position_jitter(width = 0.25, height = 0))
+ scale_x_date(date_minor_breaks = "1 month")
ggplot(pedidosFilt, aes(fecha_pe,total_pagado )) + geom_point(aes(color = cod_bodega),
alpha = 0.5,
size = 1.5,
position = position_jitter(width = 0.25, height = 0))+ scale_x_date(date_minor_breaks = "1 month")
qplot(pedidosFilt$fecha_pe,pedidosFilt$total_pagado,col=pedidosFilt$cod_bodega,alpha=I(0.1)) +
ggplot(pedidosFilt, aes(fecha_pe,total_pagado )) + geom_point(aes(color = cod_bodega),
alpha = 0.5,
size = 1.5,
position = position_jitter(width = 0.25, height = 0))+ scale_x_date(date_minor_breaks = "1 month")
qplot(pedidosFilt$fecha_pe,pedidosFilt$total_pagado,col=pedidosFilt$cod_bodega,alpha=I(0.1))
ggplot(pedidosFilt, aes(fecha_pe,total_pagado )) + geom_point(aes(color = cod_bodega),
alpha = 0.5,
size = 1.5,
position = position_jitter(width = 0.25, height = 0))+ scale_x_date(date_minor_breaks = "1 month")
ggplot(pedidosFilt,
aes(x=fecha_pe,
y=total_pagado,
color=cod_bodega)) +
geom_line()
?aggregate()
pedidosFilt$mes <- floor_date(pedidosFilt$fecha_pe, "month")
library(lubridate)
install.packages("lubricate")
install.packages("lubridate")
library(lubridate)
pedidosFilt$mes <- floor_date(pedidosFilt$fecha_pe, "month")
ddply(pedidosFilt, "mes", summarise, x = mean(x))
library(plyr)
ddply(pedidosFilt, "mes", summarise, x = mean(x))
ddply(pedidosFilt, "mes", summarise, x = mean(total_pagado))
datos<-ddply(pedidosFilt, "mes", summarise, x = mean(total_pagado))
ggplot(datos,
aes(x=es,
y=x,
color=cod_bodega)) +
geom_line()
ggplot(datos,
aes(x=mes,
y=x,
color=cod_bodega)) +
geom_line()
ggplot(datos,
aes(x=mes,
y=x
) +
geom_line()
)
ggplot(datos,
aes(x=mes,
y=x)) +
geom_line()
ggplot(datos,
aes(x=mes,
y=x)) +
geom_line()
ggplot(datos,
aes(x=mes,
y=x)) +
geom_line()+ scale_x_date(date_minor_breaks = "1 month")
library(plyr)
datos<-ddply(pedidosFilt, "mes", summarise, x = sum(total_pagado))
ggplot(datos,
aes(x=mes,
y=x)) +
geom_line()+ scale_x_date(date_minor_breaks = "1 month")
hc <- hclust(dist(USArrests), "ave")
plot(hc)
plot(hc, hang = -1)
source('C:/clasificadoresJerarquicosAddClass/cargarResultadosExp.R')
source('C:/clasificadoresJerarquicosAddClass/cargarResultadosExp.R')
View(promediosXDataSet)
View(promediosXDataSet)
View(promediosXMissingClass)
View(promediosXMissingClass)
View(resultados)
View(resultados)
View(promediosXDataSet)
View(promediosXDataSet)
source('C:/clasificadoresJerarquicosAddClass/MainExperiments.R')
source('C:/clasificadoresJerarquicosAddClass/MainExperiments.R')
source('C:/clasificadoresJerarquicosAddClass/MainExperiments.R')
source('C:/clasificadoresJerarquicosAddClass/MainExperiments.R')
nombreDatasetOps<-c("Frogs")#"flare","letters","forest","sports",dermatology
techniqueClassifOps<-c("C50")#"RPART","nb","SVM-EX","knn","nnet","RF-EX","C50"
listEscenario<-c("Escenario_1")
minNumCicles<-5
maxNumCicles<-5
etiquetaEspecifica<-"Adenomera"
#Cargo las librerias
.lib<- c("data.tree","ggvis","shiny","caret","C50","plyr","rpart","dplyr","dendextend","gplots","nnet","igraph","unbalanced")
.inst <- .lib %in% installed.packages()
if (length(.lib[!.inst])>0) install.packages(.lib[!.inst])
lapply(.lib, require, character.only=TRUE)
source('C:/clasificadoresJerarquicosAddClass/MainExperiments.R')
source('C:/clasificadoresJerarquicosAddClass/MainExperiments.R')
source('C:/clasificadoresJerarquicosAddClass/MainExperiments.R')
source('C:/clasificadoresJerarquicosAddClass/MainExperiments.R')
?createDataPartition
?createDataPartition()
# args=commandArgs(trailingOnly=TRUE)
# listEscenario=c(args[1])
# nombreDatasetOps=c(args[2])
# techniqueClassifOps=c(args[3])
# minNumCicles=as.numeric(args[4])
# maxNumCicles=as.numeric(args[5])
# etiquetaEspecifica<-""
# Sys.setlocale("LC_CTYPE", "en_US.UTF-8")
nombreDatasetOps<-c("optdigits")#glass vehicle  optdigits
#"flare","letters","forest","sports",dermatology
techniqueClassifOps<-c("nnet")#"RPART","nb","SVM-EX","knn","nnet","RF-EX","C50"
listEscenario<-c("Escenario_2")
minNumCicles<-10
maxNumCicles<-10
etiquetaEspecifica<-""
#Cargo las librerias
.lib<- c("data.tree","ggvis","shiny","caret","C50","plyr","rpart","dplyr","dendextend","gplots","nnet","igraph","unbalanced")
.inst <- .lib %in% installed.packages()
if (length(.lib[!.inst])>0) install.packages(.lib[!.inst])
lapply(.lib, require, character.only=TRUE)
#Especificacion de Directorio Raiz:
if (Sys.info()[1] == "Windows") {
#Windows
dirRaiz<-"C:/clasificadoresJerarquicosAddClass"
}else{
#MAC
if (Sys.info()[1] == "Darwin") {
dirRaiz<-"/Users/deliagabrielagrandajuca/clasificadoresJerarquicosAddClass"
}else{
#Linux
#UPV
dirRaiz<-"/home/dsilva/clasificadoresJerarquicosAddClass"
#Ofina
#dirRaiz<-"/home/daniel/clasificadoresJerarquicosAddClass"
}
}
setwd(dirRaiz)
#Requiered Libraries:
source('functions.R')
source('matrizConfusion_to_matrizDiferencias.R')
source('myclasificadorJer_LNP.R')
source('myBalancedClasificadorJer_LNP.R')
source('preprocesamiento_accesoDataSet.R')
#With Probabilities:
source('clasificadorJer_LNP_WithProbs.R')
source('techniquesLibraries_WithProbs.R')
#Contenedor de resultados
resultados <-
data.frame(
escenario =character(),
nrofold = numeric(),
datasetSel = character(),
metClasificacion = character(),
missingclass = character(),
acuJer = numeric(),
opcion = character(),
topdownType = character(),
#Guardo Tiempos
tiempoEntrenaNuevoCla = numeric(),
tiempoReentrena = numeric(),
tiempoReentrenaCreaArbol= numeric(),
stringsAsFactors = FALSE
)
#Contenedor de Datos Estadisticos
estadisticasTiempos <-
data.frame(
nombreMaquina = character(),
nrofold = numeric(),
datasetSel = character(),
metClasificacion = character(),
escenario = character(),
tiempoXCiclo= numeric(),
stringsAsFactors = FALSE
)
?createDataPartition()
data <- cargarDatos(nombreDataset)
#Contenedor de resultados
resultados <-
data.frame(
escenario =character(),
nrofold = numeric(),
datasetSel = character(),
metClasificacion = character(),
missingclass = character(),
acuJer = numeric(),
opcion = character(),
topdownType = character(),
#Guardo Tiempos
tiempoEntrenaNuevoCla = numeric(),
tiempoReentrena = numeric(),
tiempoReentrenaCreaArbol= numeric(),
stringsAsFactors = FALSE
)
#Contenedor de Datos Estadisticos
estadisticasTiempos <-
data.frame(
nombreMaquina = character(),
nrofold = numeric(),
datasetSel = character(),
metClasificacion = character(),
escenario = character(),
tiempoXCiclo= numeric(),
stringsAsFactors = FALSE
)
##############################################
# Prepare the experiments
##############################################
#Creo 10 (nfolds) Folds Cross Validation
library(caret)
#Parametros
#---------------------------------------------
topDownTypeOps<-c("TopDown-BottomUp")#"TopDown","TopDown-BottomUp"
balanceOpt<-FALSE #SMOTE
tiemposXCiclos<-list()
#Genero Id Randomico para procesamiento en paralelo
idExperimento<-genRandomString()
nombreDataset <- nombreDatasetOps[1]
topDownType <- topDownTypeOps[1]
data <- cargarDatos(nombreDataset)
str(data)
set.seed(123)
nombreIndex<-paste("indices/",nombreDataset,"_indx.RData",sep = '')
listIndexes<-list()
# 10 Repetitions
for (ik in 1:10){
partIndex50Perct <- createDataPartition(data$claseAPredecir, p = .5, list = FALSE, times = 1)
partitionB <- data[-partIndex50Perct,]  #Particion B 50%
partIndex25Perct <- createDataPartition(partitionB$claseAPredecir, p = .5, list = FALSE, times = 1)
#Guardo los indices de la Repetition para que sea reproducible
listIndexes[[ik]]<-list(partIndex50Perct,partIndex25Perct)
}
source('C:/clasificadoresJerarquicosAddClass/cargarResultadosExp.R')
dbEsc1RA<-promediosXMissingClass[promediosXMissingClass$escenario=='Escenario_1' & promediosXMissingClass$opcion=='Reframing' ,]
dbEsc1TA<-promediosXMissingClass[promediosXMissingClass$escenario=='Escenario_1' & promediosXMissingClass$opcion=='Retraming' ,]
dbEsc2RA<-promediosXMissingClass[promediosXMissingClass$escenario=='Escenario_2' & promediosXMissingClass$opcion=='Reframing' ,]
dbEsc2TA<-promediosXMissingClass[promediosXMissingClass$escenario=='Escenario_2' & promediosXMissingClass$opcion=='Retraming' ,]
table(promediosXMissingClass$opcion)
#Obtengo Promedios x Missing Class
promediosXMissingClass <- aggregate(x = resultados[c("acuJer",
"tiempoEntrenaNuevoCla",
"tiempoReentrena",
"tiempoReentrenaCreaArbol")],
by = resultados[c("escenario", "datasetSel","metClasificacion","missingclass","opcion")],
FUN = function(valoresFilas){
round(mean(pmax(valoresFilas, 0)),digits = 3)
})
dirRaiz<-"C:/compendioResultados/resultados"
listaArchivosResultados<-list.files(dirRaiz, pattern=NULL, all.files=FALSE,full.names=FALSE,recursive = TRUE)
library(readr)
#creo contenedor
resultados <-
data.frame(
escenario =character(),
nrofold = numeric(),
datasetSel = character(),
metClasificacion = character(),
missingclass = character(),
acuJer = numeric(),
opcion = character(),
topdownType = character(),
#Guardo Tiempos en Minutos
tiempoEntrenaNuevoCla = numeric(),
tiempoReentrena = numeric(),
tiempoReentrenaCreaArbol= numeric(),
stringsAsFactors = FALSE
)
for(i in listaArchivosResultados){
datosExtraidos <- read_csv(paste("C:/compendioResultados/resultados/",i,sep = ""),col_types = cols(X = col_skip()))
datosExtraidos <-datosExtraidos[,-1]
resultados<- rbind(resultados,datosExtraidos)
}
#Elimino los registros duplicados
#Creo un id=escenario + nrofold + datasetSel + metClasificacion + missingclass
resultados["Identificador"]<-paste(resultados$escenario,"_",resultados$nrofold,"_",resultados$datasetSel,"_",resultados$metClasificacion,"_",resultados$missingclass,"_",resultados$opcion,sep = "")
resultados<-resultados[!duplicated(resultados["Identificador"]),]
#Quito columnas inservibles:
resultados <- resultados[,(!names(resultados) %in% c("topdownType"))]
resultados <- resultados[,(!names(resultados) %in% c("Identificador"))]
#Guardo los datos de los experimentos en un archivo unico
write.csv(resultados, file = "C:/compendioResultados/Resumenes/resultadosCompletos.csv")
#Obtengo Promedios x Missing Class
promediosXMissingClass <- aggregate(x = resultados[c("acuJer",
"tiempoEntrenaNuevoCla",
"tiempoReentrena",
"tiempoReentrenaCreaArbol")],
by = resultados[c("escenario", "datasetSel","metClasificacion","missingclass","opcion")],
FUN = function(valoresFilas){
round(mean(pmax(valoresFilas, 0)),digits = 3)
})
summary(promediosXMissingClass)
promediosXMissingClass$opcion<-factor(promediosXMissingClass$opcion)
summary(promediosXMissingClass)
promediosXMissingClass$opcion<-factor(promediosXMissingClass$opcion)
#Obtengo Promedios
promediosXDataSet <- aggregate(x = resultados[c("acuJer",
"tiempoEntrenaNuevoCla",
"tiempoReentrena",
"tiempoReentrenaCreaArbol")],
by = resultados[c("escenario", "datasetSel","metClasificacion","opcion")],
FUN = function(valoresFilas){
round(mean(pmax(valoresFilas, 0)),digits = 3)
})
#Necesito agregar a la columna el porcentaje de instancias por dataframe
listdatasets<-unique(promediosXMissingClass$datasetSel)
listdatasets
#Creo la columna: (con valores por defecto=0)
promediosXMissingClass["porcentaje"]<-c(rep(0,nrow(promediosXMissingClass)))
#Necesito agregar a la columna el porcentaje de instancias por dataframe
listdatasets<-unique(promediosXMissingClass$datasetSel)
#Creo la columna: (con valores por defecto=0)
promediosXMissingClass["porcentaje"]<-c(rep(0,nrow(promediosXMissingClass)))
dirRaiz<-"C:/clasificadoresJerarquicosAddClass"
setwd(dirRaiz)
for(dsetTemporal in listdatasets){
source('preprocesamiento_accesoDataSet.R')
data <- cargarDatos(nombreDataSet = dsetTemporal)
#Obtengo Porcentajes por etiqueta
etiquetasConteos<-table(data$claseAPredecir)
etiquetas<-names(etiquetasConteos)
nivelesCont<-etiquetasConteos/sum(as.numeric(etiquetasConteos))
for(contTemp in 1:length(etiquetas)){
ubicaciones<-which(promediosXMissingClass$missingclass==etiquetas[contTemp]&promediosXMissingClass$datasetSel==dsetTemporal)
#Asigno este porcentaje a cada registro de experimento
promediosXMissingClass$porcentaje[ubicaciones]<-as.numeric(nivelesCont[contTemp])
}
}
#----------------------------------------------------------------------------------------------------
#Graficamos y analizamos la informacion de los resultados
dbEsc1<-promediosXMissingClass[promediosXMissingClass$escenario=='Escenario_1',]
dbEsc2<-promediosXMissingClass[promediosXMissingClass$escenario=='Escenario_2',]
dbEsc1RA<-promediosXMissingClass[promediosXMissingClass$escenario=='Escenario_1' & promediosXMissingClass$opcion=='Reframing' ,]
dbEsc1TA<-promediosXMissingClass[promediosXMissingClass$escenario=='Escenario_1' & promediosXMissingClass$opcion=='Retraming' ,]
dbEsc2RA<-promediosXMissingClass[promediosXMissingClass$escenario=='Escenario_2' & promediosXMissingClass$opcion=='Reframing' ,]
dbEsc2TA<-promediosXMissingClass[promediosXMissingClass$escenario=='Escenario_2' & promediosXMissingClass$opcion=='Retraming' ,]
dbEsc1RA
dbEsc1TA
promediosXMissingClass
table(promediosXMissingClass$opcion)
dbEsc1RA<-promediosXMissingClass[promediosXMissingClass$escenario=='Escenario_1' & promediosXMissingClass$opcion=='Reframing' ,]
dbEsc1TA<-promediosXMissingClass[promediosXMissingClass$escenario=='Escenario_1' & promediosXMissingClass$opcion=='Retraining' ,]
dbEsc2RA<-promediosXMissingClass[promediosXMissingClass$escenario=='Escenario_2' & promediosXMissingClass$opcion=='Reframing' ,]
dbEsc2TA<-promediosXMissingClass[promediosXMissingClass$escenario=='Escenario_2' & promediosXMissingClass$opcion=='Retraining' ,]
t.test(dbEsc1RA$acuJer,dbEsc1TA$acuJer)
stats:t.test(dbEsc1RA$acuJer,dbEsc1TA$acuJer)
stats:t.test(dbEsc1RA$acuJer,dbEsc1TA$acuJer)
t.test(dbEsc1RA$acuJer,dbEsc1TA$acuJer)
t.test(dbEsc2RA$acuJer,dbEsc2TA$acuJer)
?t.test
t.test(dbEsc1TA$acuJer,dbEsc1RA$acuJer)
accEscTA<-dbEsc1TA$acuJer
accEscRA<-dbEsc1RA$acuJer
dbTA<-cbind(accEscTA,accEscRA)
View(dbTA)
View(dbTA)
write.csv(dbTA, file = "C:/compendioResultados/Resumenes/dbTA.csv")
write.csv(dbTA, file = "C:/compendioResultados/Resumenes/dbTA.csv",row.names = FALSE)
