x[x==6]<-"k"
x[x==7]<-"l"
x[x==8]<-"m"
x[x==9]<-"n"
abalone$claseAPredecir<-x
abalone$claseAPredecir<-factor(abalone$claseAPredecir)
#Simplifico la prueba:
#abalone<-abalone[0:1000,]
#abalone<-abalone[sample(nrow(abalone), size = 1000, replace = FALSE),]
dataSetUse<-abalone
#Para las pruebas con grandes Datasets
#Si el dataSetUse es mayor de 1000 entonces limitar solamente a 1000 predicciones
if(nrow(dataSetUse)>1000){
#Separo las filas que tienen muy poco ejemplos
ttable<-table(dataSetUse$claseAPredecir)
selectCat<-names(ttable[which(ttable<100)])
dataSetUse_1Part<-dataSetUse[dataSetUse$claseAPredecir %in% selectCat,]
#De los otros valores obtengo los datos obtengo los registros de dataSetUse
dataSetUse_2Part<-dataSetUse[!dataSetUse$claseAPredecir %in% selectCat,]
dataSetUse_2Part$claseAPredecir<-factor(dataSetUse_2Part$claseAPredecir)
levels(dataSetUse$claseAPredecir)
#Obtengo el 5% del total por clase
library(caret)
selTest <- createDataPartition(dataSetUse_2Part$claseAPredecir, p = 0.20, list = FALSE)
dataSetUse_2Part <- dataSetUse_2Part[ selTest,]
#Junto todas las partes
dataSetUse<-rbind(dataSetUse_1Part,dataSetUse_2Part)
dataSetUse$claseAPredecir<-factor(dataSetUse$claseAPredecir)
#filtTesting<-filtTesting[sample(nrow(filtTesting), size = 1000, replace = FALSE),]
}
dataSetUse$claseAPredecir<-factor(dataSetUse$claseAPredecir)
# Obtencion de los Datos
letter <- read.csv("C:/ejerciciosr/paperTFM/datos/letter-recognition.data", header=FALSE)
# Asigno los nombres de las columnas
colnames(letter)[colnames(letter)=="V1"] <- "claseAPredecir"
# Muestro la composicion de los datos
summary(letter)
str(letter)
#Operaciones de Descripcion de datos
letter <- letter[complete.cases(letter),]
#Muestro la relacion entre variables a traves de un dendograma:
cc <- cor(letter[2:17],use="pairwise",method="pearson")
thc <- hclust(dist(cc), method="average")
dn <- as.dendrogram(thc)
plot(dn, horiz = TRUE)
#Simplifico la prueba
#Simplifico la prueba+
letter$claseAPredecir<-factor(letter$claseAPredecir)
#Obtengo las 20 registros randomicamente por cada categoria
categorias<-levels(letter$claseAPredecir)
nuevodf<-letter[letter$claseAPredecir=="cualquier",]
for(i in 1:length(categorias)){
dfxcat<-letter[letter$claseAPredecir==categorias[i],]
nuevodf<-rbind(nuevodf,dfxcat[sample(nrow(dfxcat),size=100, replace=FALSE),])
}
letter<-nuevodf
dataSetUse<-letter
# Obtencion de los Datos
audiology <- read.csv("C:/Users/Daniel/Dropbox/Tesis Doctorado/paperTFM/datos/audiology.data", header=FALSE, na.strings="?")
audiology.test <- read.csv("C:/Users/Daniel/Dropbox/Tesis Doctorado/paperTFM/datos/audiology.standardized.test", header=FALSE, na.strings="?")
# Asigno los nombres de las columnas
colnames(audiology)[colnames(audiology)=="V71"] <- "claseAPredecir"
colnames(audiology.test)[colnames(audiology.test)=="V71"] <- "claseAPredecir"
# Muestro la composicion de los datos
summary(audiology)
str(audiology)
#Quito las categorias con muy pocos ejemplos
ttable<-table(audiology$claseAPredecir)
categoriasQuitar<-names(ttable[which(ttable>3)])
audiology<-audiology[audiology$claseAPredecir %in% categoriasQuitar,]
audiology$claseAPredecir<-factor(audiology$claseAPredecir)
audiology.test<-audiology.test[audiology.test$claseAPredecir %in% categoriasQuitar,]
audiology.test$claseAPredecir<-factor(audiology.test$claseAPredecir)
#Quito atributos que no me sirven:
#Practicando
l<-sapply(audiology,function(x)is.factor(x))
l
m<-audiology[,names(which(l=="TRUE"))]
ifelse(n<-sapply(m,function(x)length(levels(x)))==1,"DROP","NODROP")
#Quito: Las que tienen DROP
audiology <- audiology[,(!names(audiology) %in% c("V22"))]
audiology <- audiology[,(!names(audiology) %in% c("V29"))]
audiology <- audiology[,(!names(audiology) %in% c("V32"))]
audiology <- audiology[,(!names(audiology) %in% c("V42"))]
audiology <- audiology[,(!names(audiology) %in% c("V48"))]
audiology <- audiology[,(!names(audiology) %in% c("V49"))]
audiology <- audiology[,(!names(audiology) %in% c("V51"))]
audiology <- audiology[,(!names(audiology) %in% c("V42"))]
audiology <- audiology[,(!names(audiology) %in% c("V70"))]
audiology.test <- audiology.test[,(!names(audiology.test) %in% c("V22"))]
audiology.test <- audiology.test[,(!names(audiology.test) %in% c("V29"))]
audiology.test <- audiology.test[,(!names(audiology.test) %in% c("V32"))]
audiology.test <- audiology.test[,(!names(audiology.test) %in% c("V42"))]
audiology.test <- audiology.test[,(!names(audiology.test) %in% c("V48"))]
audiology.test <- audiology.test[,(!names(audiology.test) %in% c("V49"))]
audiology.test <- audiology.test[,(!names(audiology.test) %in% c("V51"))]
audiology.test <- audiology.test[,(!names(audiology.test) %in% c("V42"))]
audiology.test <- audiology.test[,(!names(audiology.test) %in% c("V70"))]
#Quito variable que solo tiene nulls
audiology <- audiology[,(!names(audiology) %in% c("V8"))]
audiology.test <- audiology.test[,(!names(audiology.test) %in% c("V8"))]
audiology <- audiology[,(!names(audiology) %in% c("V6"))]
audiology.test <- audiology.test[,(!names(audiology.test) %in% c("V6"))]
#Operaciones de Descripcion de datos
audiology <- audiology[complete.cases(audiology),]
audiology.test <- audiology[complete.cases(audiology.test),]
#Creo un solo dataset
audiology<-rbind(audiology,audiology.test)
audiology$claseAPredecir<-factor(audiology$claseAPredecir)
names(audiology)
summary(audiology)
#Quito valores que son los mismo
audiology <- audiology[,(!names(audiology) %in% c("V68"))]
audiology <- audiology[,(!names(audiology) %in% c("V67"))]
audiology <- audiology[,(!names(audiology) %in% c("V46"))]
audiology <- audiology[,(!names(audiology) %in% c("V23"))]
audiology <- audiology[,(!names(audiology) %in% c("V20"))]
audiology <- audiology[,(!names(audiology) %in% c("V21"))]
audiology <- audiology[,(!names(audiology) %in% c("V13"))]
audiology <- audiology[,(!names(audiology) %in% c("V12"))]
audiology <- audiology[,(!names(audiology) %in% c("V9"))]
dataSetUse<-audiology
glass <- read.csv("C:/ejerciciosr/paperTFM/datos/glass.data", header=FALSE, stringsAsFactors=FALSE)
# Asigno los nombres de las columnas
colnames(glass)[colnames(glass)=="V11"] <- "claseAPredecir"
colnames(glass)[colnames(glass)=="V2"] <- "RI"
colnames(glass)[colnames(glass)=="V3"] <- "Na"
colnames(glass)[colnames(glass)=="V4"] <- "Mg"
colnames(glass)[colnames(glass)=="V5"] <- "Al"
colnames(glass)[colnames(glass)=="V6"] <- "Si"
colnames(glass)[colnames(glass)=="V7"] <- "K"
colnames(glass)[colnames(glass)=="V8"] <- "Ca"
colnames(glass)[colnames(glass)=="V9"] <- "Ba"
colnames(glass)[colnames(glass)=="V10"] <- "Fe"
#Reemplazando por el nombre de las clases
x<-glass$claseAPredecir
x[x==1]<-"building_windows_float_processed"
x[x==2]<-"building_windows_non_float_processed"
x[x==3]<-"vehicle_windows_float_processed"
x[x==4]<-"vehicle_windows_non_float_processed"
x[x==5]<-"containers"
x[x==6]<-"tableware"
x[x==7]<-"headlamps"
glass$claseAPredecir<-x
glass$claseAPredecir<-factor(glass$claseAPredecir)
# Muestro la composicion de los datos
summary(glass)
str(glass)
#Quito columna de ids
glass <- glass[,(!names(glass) %in% c("V1"))]
#Operaciones de Descripcion de datos
glass <- glass[complete.cases(glass),]
#Muestro la relacion entre variables a traves de un dendograma:
cc <- cor(glass[1:9],use="pairwise",method="pearson")
thc <- hclust(dist(cc), method="average")
dn <- as.dendrogram(thc)
plot(dn, horiz = TRUE)
dataSetUse<-glass
flare <- read.table("C:/ejerciciosr/paperTFM/datos/flare.data", quote="\"", comment.char="", stringsAsFactors=FALSE)
# Asigno los nombres de las columnas
colnames(flare)[colnames(flare)=="V1"] <- "claseAPredecir"
flare$claseAPredecir<-factor(flare$claseAPredecir)
#Operaciones de Descripcion de datos
flare <- flare[complete.cases(flare),]
# Muestro la composicion de los datos
summary(flare)
str(flare)
#Quito variables que no ayudan a la clasificacion
flare <- flare[,(!names(flare) %in% c("V10"))]
#Muestro la relacion entre variables a traves de un dendograma:
#Muestro solo datos numericos
cc <- cor(flare[4:12],use="pairwise",method="pearson")
thc <- hclust(dist(cc), method="average")
dn <- as.dendrogram(thc)
plot(dn, horiz = TRUE)
#For every unique value in the string column, create a new 1/0 column
#This is what Factors do "under-the-hood" automatically when passed to function requiring numeric data
for(level in unique(flare$V2)){
flare[paste("D", level, sep = "")] <- ifelse(flare$V2 == level, 1, 0)
}
flare<-flare[,-2]
flare
for(level in unique(flare$V3)){
flare[paste("D", level, sep = "")] <- ifelse(flare$V3 == level, 1, 0)
}
flare<-flare[,-2]
head(flare)
summary(flare)
flare <- flare[complete.cases(flare),]
dataSetUse<-flare
dermatology <- read.csv("C:/ejerciciosr/paperTFM/datos/dermatology.txt", header=FALSE, stringsAsFactors=FALSE)
colnames(dermatology)[colnames(dermatology)=="V35"] <- "claseAPredecir"
dermatology <- dermatology[complete.cases(dermatology),]
#Reemplazando por el nombre de las clases
x<-dermatology$claseAPredecir
x[x==1]<-"psoriasis"
x[x==2]<-"seboreic dermatitis"
x[x==3]<-"lichen planus"
x[x==4]<-"pityriasis rosea"
x[x==5]<-"cronic dermatitis"
x[x==6]<-"pityriasis rubra pilaris"
dermatology$claseAPredecir<-x
dermatology$claseAPredecir<-factor(dermatology$claseAPredecir)
dermatology$V34 <- as.numeric(as.character(dermatology$V34))
dermatology <- dermatology[complete.cases(dermatology),]
dataSetUse<-dermatology
# Obtencion de los Datos
zoo <- read.csv("C:/ejerciciosr/paperTFM/datos/zoo.data", header=FALSE,stringsAsFactors=FALSE)
# Asigno los nombres de las columnas
colnames(zoo)<-c("nombre","pelo","plumas","huevos","leche","aereo","acuatico","depredador","dentada","espinadorsal","respira","venenosa","aletas","nropiernas","cola","domestico","catsize","claseAPredecir")
#Pongo los nombres a las clases
zoo$claseAPredecir[zoo$claseAPredecir=='1']<-'grupo1'
zoo$claseAPredecir[zoo$claseAPredecir=='2']<-'grupo2'
zoo$claseAPredecir[zoo$claseAPredecir=='3']<-'grupo3'
zoo$claseAPredecir[zoo$claseAPredecir=='4']<-'grupo4'
zoo$claseAPredecir[zoo$claseAPredecir=='5']<-'grupo5'
zoo$claseAPredecir[zoo$claseAPredecir=='6']<-'grupo6'
zoo$claseAPredecir[zoo$claseAPredecir=='7']<-'grupo7'
zoo$claseAPredecir<-factor(zoo$claseAPredecir)
#Quito las columnas sin informacion
zoo <- zoo[,(!names(zoo) %in% c("nombre"))]
dataSetUse<-zoo
# Obtencion de los Datos
datasetnfilt <- read.csv("C:/ejerciciosr/paperTFM/datos/datasetnfilt.csv", stringsAsFactors=FALSE)
#Quito columna del ID
datasetnfilt <- datasetnfilt[,(!names(datasetnfilt) %in% c("X"))]
#Especifico la variable dependiente
colnames(datasetnfilt)[colnames(datasetnfilt)=="sport"] <- "claseAPredecir"
#Pongo los nombres a ls clases
datasetnfilt$claseAPredecir[datasetnfilt$claseAPredecir=='ci']<-'cycling'
datasetnfilt$claseAPredecir[datasetnfilt$claseAPredecir=='hi']<-'hiking'
datasetnfilt$claseAPredecir[datasetnfilt$claseAPredecir=='ky']<-'kayaking'
datasetnfilt$claseAPredecir[datasetnfilt$claseAPredecir=='mb']<-'mountain_biking'
datasetnfilt$claseAPredecir[datasetnfilt$claseAPredecir=='mc']<-'motorcycling'
datasetnfilt$claseAPredecir[datasetnfilt$claseAPredecir=='mo']<-'mountaineering'
datasetnfilt$claseAPredecir[datasetnfilt$claseAPredecir=='rn']<-'running'
datasetnfilt$claseAPredecir[datasetnfilt$claseAPredecir=='sl']<-'sailing'
datasetnfilt$claseAPredecir[datasetnfilt$claseAPredecir=='tb']<-'trail_bike'
datasetnfilt$claseAPredecir[datasetnfilt$claseAPredecir=='tr']<-'trail_running'
datasetnfilt$claseAPredecir<-factor(datasetnfilt$claseAPredecir)
datasetnfilt$claseAPredecir <- factor(datasetnfilt$claseAPredecir)
dataSetUse<-datasetnfilt
foresttypeTrain <- read.csv("C:/ejerciciosr/paperTFM/datos/trainingForest.csv")
foresttypeTest <- read.csv("C:/ejerciciosr/paperTFM/datos/testingForest.csv")
#Unifico los datos en un dataset
forestType<-rbind(foresttypeTrain,foresttypeTest)
#Especifico la variable dependiente
colnames(forestType)[colnames(forestType)=="tipo"] <- "claseAPredecir"
#Obtengo los ejemplos con datos incompletos
forestType <- forestType[complete.cases(forestType),]
#Muestro la relacion entre variables a traves de un dendograma:
cc <- cor(forestType[2:28],use="pairwise",method="pearson")
thc <- hclust(dist(cc), method="average")
dn <- as.dendrogram(thc)
plot(dn, horiz = TRUE)
dataSetUse<-forestType
# Obtencion de los Datos
abalone <- read.csv("C:/ejerciciosr/paperTFM/datos/abalone.data", header=FALSE)
# Asigno los nombres de las columnas
colnames(abalone)[colnames(abalone)=="V9"] <- "claseAPredecir"
abalone$claseAPredecir<-as.character(abalone$claseAPredecir)
abalone$claseAPredecir<-factor(abalone$claseAPredecir)
#Operaciones de Descripcion de datos
abalone <- abalone[complete.cases(abalone),]
#Muestro la relacion entre variables a traves de un dendograma:
cc <- cor(abalone[2:8],use="pairwise",method="pearson")
thc <- hclust(dist(cc), method="average")
dn <- as.dendrogram(thc)
plot(dn, horiz = TRUE)
#Quito las columnas sin informacion
abalone <- abalone[,(!names(abalone) %in% c("V1"))]
#Quito las categorias con muy pocos ejemplos
#Solamente se utiliza para entrenamiento los ejemplos con mas
#de 50 por clase.
ttable<-table(abalone$claseAPredecir)
categoriasMasCincuenta<-names(ttable[which(ttable>50)])
abalone<-abalone[abalone$claseAPredecir %in% categoriasMasCincuenta,]
abalone<-abalone[!is.na(abalone$claseAPredecir),]
abalone$claseAPredecir<-factor(abalone$claseAPredecir)
#Reemplazando por el nombre de las clases
x<-as.character(abalone$claseAPredecir)
x[x==10]<-"a"
x[x==11]<-"b"
x[x==12]<-"c"
x[x==13]<-"d"
x[x==14]<-"e"
x[x==15]<-"f"
x[x==16]<-"g"
x[x==17]<-"h"
x[x==4]<-"i"
x[x==5]<-"j"
x[x==6]<-"k"
x[x==7]<-"l"
x[x==8]<-"m"
x[x==9]<-"n"
abalone$claseAPredecir<-x
abalone$claseAPredecir<-factor(abalone$claseAPredecir)
#Simplifico la prueba:
#abalone<-abalone[0:1000,]
#abalone<-abalone[sample(nrow(abalone), size = 1000, replace = FALSE),]
dataSetUse<-abalone
#Para las pruebas con grandes Datasets
#Si el dataSetUse es mayor de 1000 entonces limitar solamente a 1000 predicciones
if(nrow(dataSetUse)>1000){
#Separo las filas que tienen muy poco ejemplos
ttable<-table(dataSetUse$claseAPredecir)
selectCat<-names(ttable[which(ttable<100)])
dataSetUse_1Part<-dataSetUse[dataSetUse$claseAPredecir %in% selectCat,]
#De los otros valores obtengo los datos obtengo los registros de dataSetUse
dataSetUse_2Part<-dataSetUse[!dataSetUse$claseAPredecir %in% selectCat,]
dataSetUse_2Part$claseAPredecir<-factor(dataSetUse_2Part$claseAPredecir)
levels(dataSetUse$claseAPredecir)
#Obtengo el 5% del total por clase
library(caret)
selTest <- createDataPartition(dataSetUse_2Part$claseAPredecir, p = 0.20, list = FALSE)
dataSetUse_2Part <- dataSetUse_2Part[ selTest,]
#Junto todas las partes
dataSetUse<-rbind(dataSetUse_1Part,dataSetUse_2Part)
dataSetUse$claseAPredecir<-factor(dataSetUse$claseAPredecir)
#filtTesting<-filtTesting[sample(nrow(filtTesting), size = 1000, replace = FALSE),]
}
dataSetUse$claseAPredecir<-factor(dataSetUse$claseAPredecir)
# Obtencion de los Datos
letter <- read.csv("C:/ejerciciosr/paperTFM/datos/letter-recognition.data", header=FALSE)
# Asigno los nombres de las columnas
colnames(letter)[colnames(letter)=="V1"] <- "claseAPredecir"
# Muestro la composicion de los datos
summary(letter)
str(letter)
#Operaciones de Descripcion de datos
letter <- letter[complete.cases(letter),]
#Muestro la relacion entre variables a traves de un dendograma:
cc <- cor(letter[2:17],use="pairwise",method="pearson")
thc <- hclust(dist(cc), method="average")
dn <- as.dendrogram(thc)
plot(dn, horiz = TRUE)
#Simplifico la prueba
#Simplifico la prueba+
letter$claseAPredecir<-factor(letter$claseAPredecir)
#Obtengo las 20 registros randomicamente por cada categoria
categorias<-levels(letter$claseAPredecir)
nuevodf<-letter[letter$claseAPredecir=="cualquier",]
for(i in 1:length(categorias)){
dfxcat<-letter[letter$claseAPredecir==categorias[i],]
nuevodf<-rbind(nuevodf,dfxcat[sample(nrow(dfxcat),size=100, replace=FALSE),])
}
letter<-nuevodf
dataSetUse<-letter
source('C:/ejerciciosr/clasificadoresJerarquicoAdaptativos/experimentos/exp_ClaJerarquico_20_db/exp_claJerarquico_20_db.R')
setwd("D:/ejerciciosr/clasificadoresJerarquicoAdaptativo")
source('C:/ejerciciosr/clasificadoresJerarquicoAdaptativo/experimentos/exp_ClaJerarquico_20_db/exp_claJerarquico_DocumentalesBaseCentroid.R')
library(readr)
pedidos <- read_csv("C:/Users/Daniel/Desktop/pedidos.csv",
col_types = cols(ciudad_pe = col_skip(),
cod_cliente = col_skip(), codigo = col_skip(),
desc_anulacion = col_skip(), desc_autorizacion = col_skip(),
direccion_pe = col_skip(), fecha_anulacion = col_skip(),
fecha_pe = col_date(format = "%Y-%m-%d"),
hora = col_number(), iva = col_double(),
num_autorizacion = col_skip(), pais_pe = col_skip(),
provincia_pe = col_skip(), telefono_pe = col_skip(),
tipo_comprobante = col_skip(), vendedor_pe = col_skip()))
View(pedidos)
plot(pedidos$total_pagado,pedidos$fecha_pe)
plot(pedidos$fecha_pe,pedidos$total_pagado)
pedidosFilt<-pedidos[pedidos$fecha_pe>as.Date("2015-01-01")]
pedidosFilt<-pedidos[ which(pedidos$fecha_pe>as.Date("2015-01-01")), ]
plot(pedidosFilt$fecha_pe,pedidosFilt$total_pagado)
plot(pedidosFilt$fecha_pe,pedidosFilt$total_pagado,col=pedidosFilt$cod_bodega)
plot(pedidosFilt$fecha_pe,pedidosFilt$total_pagado,col=pedidosFilt$cod_bodega)
axis.Date(1, at=seq(min(pedidosFilt$fecha_pe), max(pedidosFilt$fecha_pe), by="30 mon"), format="%m-%Y")
seq(min(pedidosFilt$fecha_pe), max(pedidosFilt$fecha_pe), by="30 mon")
min(pedidosFilt$fecha_pe)
max(pedidosFilt$fecha_pe)
seq(min(pedidosFilt$fecha_pe), max(pedidosFilt$fecha_pe), by="30 mon")
min(pedidosFilt$fecha_pe)
axis.Date(1, at=seq(min(pedidosFilt$fecha_pe), max(pedidosFilt$fecha_pe), by="30 mon"), format="%Y-%m-%d")
seq(min(pedidosFilt$fecha_pe), max(pedidosFilt$fecha_pe), by="30 mon")
library(ggplot2)
Lines <- "Date            Visits
11/1/2010   696537
11/2/2010   718748
11/3/2010   799355
11/4/2010   805800
11/5/2010   701262
11/6/2010   531579
11/7/2010   690068
11/8/2010   756947
11/9/2010   718757
11/10/2010  701768
11/11/2010  820113
11/12/2010  645259"
dm <- read.table(textConnection(Lines), header = TRUE)
dm <- mutate(dm, Date = as.Date(dm$Date, "%m/%d/%Y"))
ggplot(data = dm, aes(Date, Visits)) +
geom_line() +
scale_x_date(format = "%b %d", major =  "1 day")
dm <- mutate(dm, Date = as.Date(dm$Date, "%m/%d/%Y"))
plot(pedidosFilt$fecha_pe,pedidosFilt$total_pagado,col=pedidosFilt$cod_bodega)
axis.Date(1, at=seq(min(pedidosFilt$fecha_pe), max(pedidosFilt$fecha_pe), by="30 mon"), format="%Y-%m-%d")
plot(pedidosFilt$fecha_pe,pedidosFilt$total_pagado,col=pedidosFilt$cod_bodega)
seq(as.Date('2011-01-01'),as.Date('2011-01-31'),by = 1)
seq(as.Date(min(pedidosFilt$fecha_pe)),as.Date(max(pedidosFilt$fecha_pe)),by = 1)
axis.Date(1, at=seq(min(pedidosFilt$fecha_pe), max(pedidosFilt$fecha_pe), by="1"), format="%Y-%m-%d")
axis.Date(1, at=seq(min(pedidosFilt$fecha_pe), max(pedidosFilt$fecha_pe), by=1), format="%Y-%m-%d")
plot(pedidosFilt$fecha_pe,pedidosFilt$total_pagado,col=pedidosFilt$cod_bodega)
axis.Date(1, at=seq(min(pedidosFilt$fecha_pe), max(pedidosFilt$fecha_pe), by=1), format="%Y-%m-%d")
plot(pedidosFilt$fecha_pe,pedidosFilt$total_pagado,col=pedidosFilt$cod_bodega)
axis.Date(1, at=seq(min(pedidosFilt$fecha_pe), max(pedidosFilt$fecha_pe), by=1), format="%Y-%m-%d")
axis.Date(1, at=seq(min(pedidosFilt$fecha_pe), max(pedidosFilt$fecha_pe), by="month"), format="%Y-%m-%d")
plot(pedidosFilt$fecha_pe,pedidosFilt$total_pagado,col=pedidosFilt$cod_bodega)
axis.Date(1, at=seq(min(pedidosFilt$fecha_pe), max(pedidosFilt$fecha_pe), by="month"), format="%Y-%m-%d")
library(ggplot2)
qplot(pedidosFilt$fecha_pe,pedidosFilt$total_pagado,col=pedidosFilt$cod_bodega)
pedidosFilt$cod_bodega<-factor(pedidosFilt$cod_bodega)
qplot(pedidosFilt$fecha_pe,pedidosFilt$total_pagado,col=pedidosFilt$cod_bodega)
levels(pedidosFilt$cod_bodega)
levels(pedidosFilt$cod_bodega) <- c("LocalCentro", "LocalEstadio","FutbolAdictos")
library(ggplot2)
qplot(pedidosFilt$fecha_pe,pedidosFilt$total_pagado,col=pedidosFilt$cod_bodega)
qplot(pedidosFilt$fecha_pe,pedidosFilt$total_pagado,col=pedidosFilt$cod_bodega,alpha=I(0.1))
axis.Date(1, at=seq(min(pedidosFilt$fecha_pe), max(pedidosFilt$fecha_pe), by="month"), format="%Y-%m-%d")
qplot(pedidosFilt$fecha_pe,pedidosFilt$total_pagado,col=pedidosFilt$cod_bodega,alpha=I(0.1))
+ scale_x_date(date_minor_breaks = "1 month")
ggplot(pedidosFilt$fecha_pe,pedidosFilt$total_pagado,col=pedidosFilt$cod_bodega,alpha=I(0.1)) +
scale_x_date(date_minor_breaks = "1 month")
ggplot(pedidosFilt, aes(fecha_pe,total_pagado )) +
geom_line()
+ scale_x_date(date_minor_breaks = "1 month")
ggplot(pedidosFilt, aes(fecha_pe,total_pagado )) +
geom_line()  + scale_x_date(date_minor_breaks = "1 month")
qplot(pedidosFilt$fecha_pe,pedidosFilt$total_pagado,col=pedidosFilt$cod_bodega,alpha=I(0.1)) +
ggplot(pedidosFilt, aes(fecha_pe,total_pagado ))   + scale_x_date(date_minor_breaks = "1 month")
ggplot(pedidosFilt, aes(fecha_pe,total_pagado )) +
geom_line()  + scale_x_date(date_minor_breaks = "1 month")
ggplot(pedidosFilt, aes(fecha_pe,total_pagado )) +
geom_point()  + scale_x_date(date_minor_breaks = "1 month")
ggplot(pedidosFilt, aes(fecha_pe,total_pagado )) +
geom_point(aes(color = cod_bodega),
alpha = 0.5,
size = 1.5,
position = position_jitter(width = 0.25, height = 0))
+ scale_x_date(date_minor_breaks = "1 month")
ggplot(pedidosFilt, aes(fecha_pe,total_pagado )) + geom_point(aes(color = cod_bodega),
alpha = 0.5,
size = 1.5,
position = position_jitter(width = 0.25, height = 0))+ scale_x_date(date_minor_breaks = "1 month")
qplot(pedidosFilt$fecha_pe,pedidosFilt$total_pagado,col=pedidosFilt$cod_bodega,alpha=I(0.1)) +
ggplot(pedidosFilt, aes(fecha_pe,total_pagado )) + geom_point(aes(color = cod_bodega),
alpha = 0.5,
size = 1.5,
position = position_jitter(width = 0.25, height = 0))+ scale_x_date(date_minor_breaks = "1 month")
qplot(pedidosFilt$fecha_pe,pedidosFilt$total_pagado,col=pedidosFilt$cod_bodega,alpha=I(0.1))
ggplot(pedidosFilt, aes(fecha_pe,total_pagado )) + geom_point(aes(color = cod_bodega),
alpha = 0.5,
size = 1.5,
position = position_jitter(width = 0.25, height = 0))+ scale_x_date(date_minor_breaks = "1 month")
ggplot(pedidosFilt,
aes(x=fecha_pe,
y=total_pagado,
color=cod_bodega)) +
geom_line()
?aggregate()
pedidosFilt$mes <- floor_date(pedidosFilt$fecha_pe, "month")
library(lubridate)
install.packages("lubricate")
install.packages("lubridate")
library(lubridate)
pedidosFilt$mes <- floor_date(pedidosFilt$fecha_pe, "month")
ddply(pedidosFilt, "mes", summarise, x = mean(x))
library(plyr)
ddply(pedidosFilt, "mes", summarise, x = mean(x))
ddply(pedidosFilt, "mes", summarise, x = mean(total_pagado))
datos<-ddply(pedidosFilt, "mes", summarise, x = mean(total_pagado))
ggplot(datos,
aes(x=es,
y=x,
color=cod_bodega)) +
geom_line()
ggplot(datos,
aes(x=mes,
y=x,
color=cod_bodega)) +
geom_line()
ggplot(datos,
aes(x=mes,
y=x
) +
geom_line()
)
ggplot(datos,
aes(x=mes,
y=x)) +
geom_line()
ggplot(datos,
aes(x=mes,
y=x)) +
geom_line()
ggplot(datos,
aes(x=mes,
y=x)) +
geom_line()+ scale_x_date(date_minor_breaks = "1 month")
library(plyr)
datos<-ddply(pedidosFilt, "mes", summarise, x = sum(total_pagado))
ggplot(datos,
aes(x=mes,
y=x)) +
geom_line()+ scale_x_date(date_minor_breaks = "1 month")
hc <- hclust(dist(USArrests), "ave")
plot(hc)
plot(hc, hang = -1)
source('C:/clasificadoresJerarquicosAddClass/Newclass.R')
